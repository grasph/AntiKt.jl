#!/usr/bin/env julia
# -*- mode: julia; vim: set ft=julia: -*-
# an example program showing how to use fastjet
import HepMC3
using AntiKt
using ArgParse
using Printf
using Profile
import FlameGraphs
using Colors
using StatProfilerHTML
import ProfileSVG
using LoopVectorization
const R = 0.4
const ptmin = 5.0

read_events(fname, maxevents=-1, skipevents = 0) = begin
    f = open(fname)

    events = Vector{PseudoJet}[]

    HepMC3.read_events(f, maxevents=maxevents, skipevents=skipevents) do parts
        input_particles = PseudoJet[]
        for p in parts
            if p.status == 1
                push!(input_particles, PseudoJet(p.momentum.px, p.momentum.py, p.momentum.pz, p.momentum.e))
            end
        end
        push!(events, input_particles)
    end

    events
end

pretty_nbytes(nbytes) = begin
    nbytes < 1024 && return @sprintf "%.2g B" nbytes
    nbytes /= 1024
    nbytes < 1024 && return @sprintf "%.2g kiB" nbytes
    nbytes /= 1024
    nbytes < 1024 && return @sprintf "%.2g MiB" nbytes
    nbytes /= 1024
    return string(nbytes) * " GiB"
end

run_and_dump(events) = begin
    for (ievt, evt) in enumerate(events)
        jets = antikt(evt, R, ptmin)
        println("Event ", ievt)
        println("Jets in the first processed event:");
        @printf "%5s %15s %15s %15s\n" "jet #" "rapidity" "phi" "pt"
        for (ij, j) in enumerate(jets)
            @printf "%5u %15.8f %15.8f %15.8f\n" (ij-1) AntiKt.rap(j)  AntiKt.phi(j) AntiKt.pt(j)
        end
        println()
    end
end

time_code(events, niters; gcoff=false, allocation=false) = begin
    njets_acc = 0
    acc = 0.
        acc2 = 0.;
    for i in 1:niters
        print("\u0d", i, " / ", niters)
        GC.gc()
        gcoff && GC.enable(false)
        t0 = time_ns()
        for evt in events
            jets = antikt(evt, R, ptmin)
            njets_acc += length(jets)
        end
        t1 = time_ns()
        gcoff && GC.enable(true)
        dt_μs = convert(Float64, t1-t0) * 1.e-3
        acc += dt_μs
        acc2 += dt_μs^2
    end
    println()
    mean = acc / niters
    acc2 /= niters
    sigma = sqrt(niters/(niters-1) * (acc2 - mean^2))
    mean /= length(events)
    sigma /= length(events)
    err = niters > 1 ? err = " ± " * string(sigma) : ""
    println("Duration: ", mean, err, " μs/event")
    println("Number of processed events:", length(events))
    if allocation
        println("Memory allocation:")
        @timev for evt in events
            jets = antikt(evt, R, ptmin)
            njets_acc += length(jets)
        end
    end
    println("Sum of jet multiplicity over the processed events: ", njets_acc)
end

profile_code(events, niters) = begin
    Profile.init(n = 10^6, delay = 0.00001)
    profile_events(events) = begin
        for evt in events
            antikt(evt, R, ptmin)
        end
    end
    profile_events(events[1:1])
    @profile for i in 1:niters; profile_events(events); end
    statprofilehtml()
    #Light scheme#        fcolor = FlameGraphs.FlameColors(reverse(colormap("Blues", 10)[2:6]),
    #Light scheme#                                         colorant"white",
    #Light scheme#                                         colorant"black",
    #Light scheme#                                         reverse(colormap("Reds", 8)[2:6]),
    #Light scheme#                                         sequential_palette(39, 6; s=38, b=3)[1:5] #yellow-orange pallette
    #Light scheme#                                         )
    fcolor = FlameGraphs.FlameColors(reverse(colormap("Blues", 15))[1:5],
                                     colorant"slategray4",
                                     colorant"gray95",
                                     reverse(colormap("Reds", 15))[1:5],
                                     reverse(sequential_palette(39, 10; s=38, b=2))[1:5]#brownish pallette
                                     )
    ProfileSVG.save(fcolor, joinpath("statprof", "profsvg.svg"); combine=true,
                    timeunit=:ms, font="Arial, Helvetica, sans-serif")
    println("Flame graph from ProfileSVG.jl at file://", abspath("statprof/profsvg.svg"), "\n", """
\tRed tint:          Runtime dispatch
\tBrown/yellow tint: Garbage collection
\tBlue tint:         OK
""")
end

in_mem_process(events, niters=1, gcoff=false; profile=false, timing=true,
               allocation=false, dump=false) = begin
    length(events) == 0 && return nothing
    if dump
        run_and_dump(events)
    else 
        #warm-up
        jets = antikt(events[1], R, ptmin)
    end

    if timing
        time_code(events, niters; gcoff=gcoff, allocation=allocation)
    end

    if profile
        profile_code(events, niters)
    end
    nothing
end


parse_command_line(args) = begin
    s = ArgParseSettings(autofix_names=true)
    @add_arg_table s begin
        "--maxevents", "-n"
        help = "Maximum number of events to read. -1 to read all events from the  file."
        arg_type = Int
        default = -1
        "--skip", "-s"
        help = "Number of events to skip at beginning of the file."
        arg_type = Int
        default = 0
        "--nsamples", "-m"
        help = "Number of measurement points to acquire."
        arg_type = Int
        default = 1
        "--gcoff"
        help = "Turn off Julia garbage collector during each time measurement."
        action = :store_true
        "--profile"
        help = "Profile code and generate a flame graph."
        action = :store_true
        "--profile-only"
        help = "Profile code and generate a flame graph. Skip the code timing."
        action = :store_true
        "--alloc"
        help = "Provide memory allocation statistics."
        action = :store_true
        "--dump"
        help = "Display list of recontructed jets"
        action = :store_true
        "file"
        help = "HepMC3 event file in HepMC3 to read."
        required = true
    end
    return parse_args(args, s; as_symbols = true)
end

main() = begin
    args = parse_command_line(ARGS)
    events::Vector{Vector{PseudoJet}} = read_events(args[:file], args[:maxevents], args[:skip])
    in_mem_process(events, args[:nsamples], args[:gcoff]; profile=args[:profile] || args[:profile_only],
                   timing=!args[:profile_only], allocation=args[:alloc],  dump=args[:dump])
    nothing
end

if abspath(PROGRAM_FILE) == @__FILE__
    main()
end
